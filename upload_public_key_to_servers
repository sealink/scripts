#!/usr/bin/env ruby

require './server'

public_key_file = ARGV[0] || "#{ENV['HOME']}/.ssh/id_rsa.pub"

# will generate a 2048 bit encrypted public-private key pair,
# by default it will be stored in /home/{user}/.ssh/id_pub & id_rsa respectively.
if !File.exists?(public_key_file)
  command("ssh-keygen -t rsa")
end

# we have to add our public key to server, so that server can question the user
# for private key, matching it with public key for authentication. By default,
# ssh looks in a file located at /home/{user}/.ssh/authorized_keys2

rsa = File.read(public_key_file)

authorized_keys_file = "~/.ssh/authorized_keys2"
upload_all = false
Server.load.each do |server|
  unless upload_all
    print "Upload key to #{server.host}?(Y/n/All)"
    STDOUT.flush
    input = STDIN.gets.chomp
    upload_all = input == 'All'
  end

  if input == 'Y' || upload_all
    puts "Uploading key to #{server.host}"
    find_existing_key_command = "mkdir --parents ~/.ssh && touch #{authorized_keys_file} && grep \"#{rsa.strip}\" #{authorized_keys_file}"
    existing_key = server.ssh(find_existing_key_command).first
    if existing_key.empty?
      server.ssh("echo \"#{rsa.strip}\" >> #{authorized_keys_file}")
      puts "Key uploaded"
    else
      puts "Key already present"
    end
  end
end

